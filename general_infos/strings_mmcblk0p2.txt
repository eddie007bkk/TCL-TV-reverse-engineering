do_env_import
do_env_export
U-Boot 2013.01.01-svn5501 (Jul 22 2016 - 15:45:54)
bootcmd=tcleu_boot;bootm ${kernel_loadaddr} ${ramdisk_loadaddr}
bootdelay=0
baudrate=115200
kernel_loadaddr=0x04407FC0
ramdisk_loadaddr=0x4E00000
memstr=mem=244M@68M mem=276M@2284M
mali_core=4
mali_start=0
mali_size=0
mali_share=0x28000000
mali_fb_start=0x14600000
mali_fb_size=0x03100000
ump_start=0x98000000
ump_size=0x08000000
usb_port=0
set_default_env
env_import
fdt_fixup_memory_banks
__of_translate_address
1234567890-=
	qwertyuiop[]
asdfghjkl;'`
\zxcvbnm,./
789-456+1230.
$-6?HAZSle~w
=4/&QXCJu|gn2; )
zsha^WLE+"90
cjqxGNU\dmv
}tofYPKB5<'.
:3(!OF]Tkbyp
#*18AHSZelw~	
-$?6XQJC|ung
4=&/szahW^EL;2) 
jcxqNG\U"+09
3:!(_VMD{ri`
*#81FOT]bkpy
EPTGMK0123456789ABCDEF
nt72668_stbc_wait_response
nvt_emmc_part_init
nvt_read_file_to_ram
submit_int_msg
do_nvt_emmc_erase
do_nvt_emmc_read
do_nvt_emmc_restore
do_nvt_emmc_eupm
do_nvt_emmc_dump
do_nvt_emmc_write
do_nvt_emmc_miscmd
nvt_emmc_image_help
nvt_emmc_read_img
nvt_emmc_read_android_boot_img
nvt_emmc_write_img
nvt_emmc_erase_img
nvt_mmc_erase_part
do_tcleu_boot_cmd
do_nvt_boot_cmd
_Parse_GetColorFormat
Parse_JPGHeader
JPEG_Convert
DEV_FRC_ResetByWatchdog
DEV_FRC_UPD_LoadData
DEV_FRC_UpdateFRCFirmware
DEV_FRC_RecoveryFRCFirmware
DEV_FRC_GetFirmwareVersion
alloc_double_indirect_block
ext4fs_devread
ext4fs_log_journal
ext4fs_put_metadata
@@v7_dcache_inval_range
ERROR: %s - start address is not aligned - 0x%08x
ERROR: %s - stop address is not aligned - 0x%08x
### ERROR ### Please RESET the board ###
fdtcontroladdr
Using machid 0x%lx from environment
Starting kernel ...
FDT creation failed! hanging...
Bad Linux ARM zImage magic!
Resetting CPU ...
pc : [<%08lx>]	   lr : [<%08lx>]
sp : %08lx  ip : %08lx	 fp : %08lx
r10: %08lx  r9 : %08lx	 r8 : %08lx
r7 : %08lx  r6 : %08lx	 r5 : %08lx  r4 : %08lx
r3 : %08lx  r2 : %08lx	 r1 : %08lx  r0 : %08lx
Flags: %c%c%c%c
  IRQs %s  FIQs %s  Mode %s%s
undefined instruction
software interrupt
prefetch abort
data abort
    MAYBE you should read doc/README.arm-unaligned-accesses
fast interrupt request
resetting ...
WARNING: Caches not enabled
%-12s= 0x%08lX
arch_number
boot_params
baudrate    = %u bps
print Board Info structure
## Starting application at 0x%08lX ...
## Application terminated, rc = 0x%lX
Perform RESET of the CPU
start application at address 'addr'
addr [arg ...]
    - start application at address 'addr'
      passing 'arg' as arguments
## Checking Image at %08lx ...
   Legacy image found
   Bad Magic Number
   Bad Header Checksum
   Verifying Checksum ... 
   Bad Data CRC
Unknown image format!
## Transferring control to RTEMS (at address %08lx) ...
## Transferring control to NetBSD stage-2 loader (at address %08lx) ...
   XIP %s ... 
   Loading %s ... 
   Uncompressing %s ... 
GUNZIP: uncompress, out-of-mem or overwrite error - must RESET board to recover
Unimplemented compression type %d
## Booting kernel from Legacy Image at %08lx ...
Unsupported Architecture 0x%x
Wrong Image Type for %s command
Wrong Image Format for %s command
ERROR: can't get kernel image!
ERROR: unknown image format type!
Could not find kernel entry point!
Ramdisk image is corrupt or invalid
Could not find a valid device tree
Trying to execute a command out of order
initrd_start
initrd_end
cmdline subcommand not supported
bdt subcommand not supported
prep subcommand not supported
WARNING: legacy format multi component image overwritten
ERROR: new format image overwritten - must RESET the board to recover
ERROR: booting os '%s' (%d) is not supported
Automatic boot of image at addr 0x%08lX ...
Your platform's zImage format isn't supported yet!
boot Linux zImage image from memory
print header information for application image
addr [addr ...]
    - print header information for application image starting at
      address 'addr' in memory; this includes verification of the
      image contents (magic number, header and payload checksums)
boot default, i.e., run 'bootcmd'
boot application image from memory
List of available devices:
%-8s %08x %c%c%c 
print console devices and information
Loading from %s device %d, partition %d: Name: %.32s  Type: %.32s
** Read error on %d:%d
** Bad Header Checksum **
** Unknown image type
echo args to console
    - echo args to console; \c suppresses newline
exit script
Bad ext4 partition %s %d:%d
** Error ext4fs_delete() **
** Error ext4fs_write() **
load binary file from a Ext4 filesystem
<interface> <dev[:part]> [addr] [filename] [bytes]
    - load binary file 'filename' from 'dev' on 'interface'
      to address 'addr' from ext4 filesystem.
      All numeric parameters are assumed to be hex.
list files in a directory (default /)
<interface> <dev[:part]> [directory]
    - list files from 'dev' on 'interface' in a 'directory'
ext4delete
delete a file in the root directory
<interface> <dev[:part]> [Absolute filename path]
    - delete a file in / directory
create a file in the root directory
<interface> <dev[:part]> [Absolute filename path] [Address] [sizebytes]
    - create a file in / directory
** Unable to use %s %d:%d for fatwrite **
** Unable to write "%s" from %s %d:%d **
%ld bytes written
usage: fatinfo <interface> [<dev[:part]>]
** Unable to use %s %d:%d for fatinfo **
write file into a dos filesystem
<interface> <dev[:part]> <addr> <filename> <bytes>
    - write file 'filename' from the address 'addr' in RAM
      to 'dev' on 'interface'
print information about filesystem
<interface> [<dev[:part]>]
    - print information about filesystem from 'dev' on 'interface'
<interface> [<dev[:part]>] [directory]
    - list files from 'dev' on 'interface' in a 'directory'
load binary file from a dos filesystem
<interface> [<dev[:part]>]  <addr> <filename> [bytes [pos]]
    - Load binary file 'filename' from 'dev' on 'interface'
      to address 'addr' from dos filesystem.
      'pos' gives the file position to start loading from.
      If 'pos' is omitted, 0 is used. 'pos' requires 'bytes'.
      'bytes' gives the size to load. If 'bytes' is 0 or omitted,
      the load stops on end of file.
      All numeric parameters are assumed to be hex.
The address of the fdt is invalid (NULL).
libfdt fdt_check_header(): %s
 - too old, fdt %d < %d
 - too new, fdt %d > %d
* 0x%p [0x%08x]
/* NULL pointer error */
The address of the fdt is %p
New length %d < existing length %d, ignoring.
libfdt fdt_open_into(): %s
No FDT memory address configured. Please configure
the FDT address via "fdt addr <address>" command.
New length 0x%X < existing length 0x%X, aborting.
libfdt fdt_path_offset() returned %s
libfdt fdt_add_subnode(): %s
Sorry, I could not convert "%s"
Unexpected character '%c'
libfdt fdt_setprop(): %s
libfdt node not found
error: unprintable value
libfdt fdt_getprop(): %s
Nested too deep, aborting.
%s/* NOP */
Unknown tag 0x%08X
libfdt fdt_delprop():  %s
libfdt fdt_del_node():  %s
magic:			0x%x
totalsize:		0x%x (%d)
off_dt_struct:		0x%x
off_dt_strings:		0x%x
off_mem_rsvmap:		0x%x
version:		%d
last_comp_version:	%d
boot_cpuid_phys:	0x%x
size_dt_strings:	0x%x
size_dt_struct:		0x%x
number mem_rsv:		0x%x
index		   start		    size
------------------------------------------------
libfdt fdt_get_mem_rsv():  %s
    %x	%08x%08x	%08x%08x
libfdt fdt_add_mem_rsv():  %s
libfdt fdt_del_mem_rsv():  %s
flattened device tree utility commands
alias for 'help'
print command description/usage
	- print brief description of all commands
help command ...
	- print detailed usage of 'command'
## Total Size      = 0x%08x = %d Bytes
## First Load Addr = 0x%08lX
## Last  Load Addr = 0x%08lX
## Total Size      = 0x%08lX = %ld Bytes
loads_echo
## Switch baudrate to %d bps and press ENTER ...
## Ready for S-Record download ...
## S-Record download aborted
## Start Addr      = 0x%08lX
## Switch baudrate to %d bps and press ESC ...
## Ready for binary (ymodem) download to 0x%08lX at %d bps...
## Ready for binary (kermit) download to 0x%08lX at %d bps...
## Binary (kermit) download aborted
load binary file over serial line (ymodem mode)
[ off ] [ baud ]
    - load binary file over serial line with offset 'off' and baudrate 'baud'
load binary file over serial line (kermit mode)
load S-Record file over serial line
[ off ] [ baud ]
    - load S-Record file over serial line with offset 'off' and baudrate 'baud'
Base Address: 0x%08lx
Tested %d iteration(s) with %lu errors.
Pattern %08lX  Writing...%12s
Reading...
Mem error @ 0x%08X: found %08lX, expected %08lX
%s at 0x%08lx (%#0*lx) != %s at 0x%08lx (%#0*lx)
Total of %ld %s(s) were the same
Zero length ???
CRC32 for %08lx ... %08lx ==> %08lx
simple RAM read/write test
[start [end [pattern [iterations]]]]
infinite loop on address range
[.b, .w, .l] address number_of_objects
print or set address offset
    - print address offset for memory commands
    - set address offset for memory commands to 'off'
checksum calculation
address count [addr]
    - compute CRC32 checksum [save at addr]
memory compare
[.b, .w, .l] addr1 addr2 count
memory copy
[.b, .w, .l] source target count
memory write (fill)
[.b, .w, .l] address value [count]
memory modify (constant address)
[.b, .w, .l] address
memory modify (auto-incrementing address)
memory display
[.b, .w, .l] address [# of objects]
delay execution for some time
    - delay execution for N seconds (N is _decimal_ !!!)
No MMC device available
no mmc device at slot %x
get mmc type error!
#part_num shouldn't be larger than %d
Card doesn't support part_switch
switch to partions #%d, %s
mmc%d is current device
mmc%d(part %d) is current device
MMC %s: dev # %d, block # %d, count %d ... 
%d blocks %s: %s
Device: %s
Manufacturer ID: %x
Name: %c%c%c%c%c 
Tran Speed: %d
Rd Block Len: %d
%s version %d.%d
High Capacity: %s
Capacity: 
Bus Width: %d-bit
MMC sub system
read addr blk# cnt
mmc write addr blk# cnt
mmc erase blk# cnt
mmc rescan
mmc part - lists available partition on current mmc device
mmc dev [dev] [part] - show or set current mmc device [partition]
mmc list - lists available devices
display MMC info
- display info of the current MMC device
Environment size: %d/%ld bytes
## Error: "%s" not defined
## Warning: defaulting to text format
## Info: input data size = %zu = 0x%zX
## Error: bad CRC, import failed
ERROR: Environment import failed: errno = %d
at %s:%d/%s()
cmd_nvedit.c
## %s: only one of "-b", "-c" or "-t" allowed
## Warning: Input data exceeds %d bytes - truncated
## Resetting to default environment
Saving Environment to %s...
## Error: illegal character '='in variable name "%s"
## Can't malloc %d bytes
## Error inserting "%s" variable, errno=%d
ERROR: Cannot export environment: errno = %d
at %s:%d/%s()
env_buf [%d bytes] too small for value of "%s"
run commands in an environment variable
    - run the commands in the environment variable(s) 'var'
set environment variables
[-f] name value ...
    - [forcibly] set environment variable 'name' to 'value ...'
setenv [-f] name
    - [forcibly] delete environment variable 'name'
print environment variables
    - print [all] values of all environment variables
printenv name ...
    - print value of environment variable 'name'
environment handling commands
save environment variables to persistent storage
Failed to initialize SPI flash at %u:%u
ERROR: attempting %s past flash size (%#x)
Failed to map physical memory
Updating, %zu%% %lu B/s
SPI flash failed in %s step
%zu bytes written, %zu bytes skipped
 in %ld.%lds, speed %ld B/s
SPI flash %s failed
SPI flash erase offset:0x%x, len:0x%x
SF-RD: ret:%d, status:0x%x
SF-WR: ret:%d, status:0x%x
SPI flash sub-system
probe [[bus:]cs] [hz] [mode]	- init flash device on given SPI bus
				  and chip select
sf read addr offset len 	- read `len' bytes starting at
				  `offset' to memory at `addr'
sf write addr offset len	- write `len' bytes from memory
				  at `addr' to flash at `offset'
sf erase offset [+]len		- erase `len' bytes from `offset'
				  `+len' round up `len' to block size
do nothing, successfully
do nothing, unsuccessfully
minimal test like /bin/sh
See Interface
Communication
Human Interface
Mass Storage
Vendor specific
Human Interface, Subclass: 
Mass Storage, 
SFF-8020i (ATAPI)
QIC-157 (Tape)
Transp. SCSI
Command/Bulk
Command/Bulk/Int
 %s (%s, %dmA)
 %s  %s %s %s
String: "%s"
Self Powered 
Bus Powered 
Remote Wakeup 
   Configuration: %d
   - Interfaces: %d %s%s%dmA
     Interface: %d
     - Alternate Setting %d, Endpoints: %d
     - Class 
     - Endpoint %d %s 
Isochronous
 MaxPacket %d
 Interval %dms
%d: %s,  USB Revision %x.%x
 - %s %s %s
 - Class: 
 - Class: (from Interface) %s
 - PacketSize: %d  Configurations: %d
 - Vendor: 0x%04x  Product 0x%04x Version %d.%d
(Re)start USB...
stopping USB..
USB is stopped. Please issue 'usb start' first.
USB device tree:
config for device %d
*** No device available ***
no USB devices available
no current device selected
USB read: device %d block # %ld, count %ld ... 
%ld blocks read: %s
USB write: device %d block # %ld, count %ld ... 
%ld blocks write: %s
USB device %d: 
unknown device
    Device %d: 
... is now current device
boot from USB device
loadAddr dev:part
USB sub-system
start - start (scan) USB controller
usb reset - reset (rescan) USB controller
usb stop [f] - stop USB [f]=force stop
usb tree - show USB device tree
usb info [dev] - show available USB devices
usb storage - show details of USB storage devices
usb dev [dev] - show or set current USB storage device
usb part [dev] - print partition table of one or all USB storage devices
usb read addr blk# cnt - read `cnt' blocks starting at block `blk#'
    to memory address `addr'
usb write addr blk# cnt - write `cnt' blocks starting at block `blk#'
    from memory address `addr'
arm-linux-gnueabihf-gcc (crosstool-NG linaro-1.13.1-4.7-2013.04-20130415 - Linaro GCC 2013.04) 4.7.3 20130328 (prerelease)
GNU ld (crosstool-NG linaro-1.13.1-4.7-2013.04-20130415 - Linaro GCC 2013.04) 2.23.1
print monitor, compiler and linker version
- No additional help available.
Unknown command '%s' - try 'help' without arguments for list of all known commands
Unknown command '%s' - try 'help'
'bootd' recursion detected
No input devices available!
No output devices available!
No error devices available!
.callbacks:callbacks,.flags:flags,baudrate:baudrate,bootfile:bootfile,loadaddr:loadaddr,silent:silent,stdin:console,stdout:console,stderr:console,
.callbacks
*** Warning - %s, using default environment
Using default environment
env_common.c
ERROR: Cannot import environment: errno = %d
at %s:%d/%s()
!import failed
serial#:so,
## Warning: Unknown environment variable type '%c'
## Warning: Unknown environment variable access method '%c'
Warning: Non-standard access flags. (0x%x)
## Error: Can't delete "%s"
## Error: Can't overwrite "%s"
oldval: %s  defval: %s
## Error: Can't create "%s"
## Error: flags type check failure for "%s" <= "%s" (type: %c)
No MMC card found
MMC init failed
Writing to MMC(%d)... 
#address-cells
#size-cells
fdt_initrd: %s
linux,initrd-start
WARNING: could not set linux,initrd-start %s.
linux,initrd-end
WARNING: could not set linux,initrd-end %s.
fdt_chosen: %s
WARNING: could not create /chosen %s.
WARNING: could not set bootargs %s.
Unable to update property %s:%s, err=%s
WARNING: could not create /memory: %s.
device_type
WARNING: could not set %s %s.
ethernet%d
local-mac-address
%s: Bad cell count for %s
linux,phandle
Can't set phandle %u: %s
Invalid fdt status: %x
Warning: device tree alias '%s' points to invalid node %s.
Warning: device tree node '%s' has no address.
Warning: U-Boot configured device %s at address %llx,
 but the device tree has it address %llx.
HASH_MAX_DIGEST_SIZE exceeded
%s for %08lx ... %08lx ==> 
Unknown hash algorithm '%s'
syntax error
ERROR : memory not allocated
ERROR: There is a global environment variable with the same name.
%s: readonly variable
HUSH_NO_EVAL
Unknown command '%s' - try 'help' or use 'run' command
exit not allowed from main input shell.
<INTERRUPT>
HUSH_VERSION
print local hushshell variables
    - print values of all hushshell variables
showvar name ...
    - print value of hushshell variable 'name'
 - must RESET the board to recover.
bootm_size
bootm_mapsize
%d Bytes = 
Unknown OS
Unknown Architecture
Unknown Image
Unknown Compression
%sImage Name:   %.*s
%sImage Type:   
%s %s %s (%s)
%sData Size:    
%sLoad Address: %08x
%sEntry Point:  %08x
%sContents:
%s   Image %d: 
%s    Offset = 0x%08lx
## Loading init Ramdisk from Legacy Image at %08lx ...
No Linux %s Ramdisk Image
Wrong Ramdisk Image Format
## Loading init Ramdisk from multi component Legacy Image at %08lx ...
initrd_high
ramdisk - allocation error
   Loading Ramdisk to %08lx, end %08lx ... 
   reserving fdt memory region: addr=%llx size=%llx
image is not a fdt
Failed using fdt_high value for Device Tree
device tree - allocation error
   Using Device Tree in place at %p, end %p
   Loading Device Tree to %p, end %p ... 
fdt move failed
## Flattened Device Tree from Legacy Image at %08lx
fdt header checksum invalid
fdt checksum invalid
uImage is not a fdt
uImage is compressed
uImage data is not a fdt
fdt overwritten
## Flattened Device Tree blob at %08lx
ERROR: Did not find a cmdline Flattened Device Tree
   Booting using the fdt blob at 0x%p
## Flattened Device Tree from multi component Image at %08lX
   Booting using the fdt at 0x%p
fdt size != image size
Invalid OS
Invalid ARCH
microblaze
MicroBlaze
MIPS 64 Bit
SPARC 64 Bit
OpenRISC 1000
Davinci AIS image
Filesystem Image
Flat Device Tree
Kernel Image
kernel_noload
Kernel Image (no loading done)
Kirkwood Boot Image
Freescale i.MX Boot Image
Invalid Image
Multi-File Image
TI OMAP SPL With GP CH
Freescale PBL Boot Image
RAMDisk Image
standalone
Standalone Program
Davinci UBL image
uncompressed
bzip2 compressed
gzip compressed
lzma compressed
lzo compressed
** Too many args (max. %d) **
bootdelaykey
bootdelaykey2
bootstopkey
bootstopkey2
  ! mpi_read_string returned %d
0123456789ABCDEF
failed to stop USB controller %d
unable to get descriptor, error %lX
config descriptor too short (expected %i, got %i)
usb_get_configuration_no: failed to get descriptor - too long: %d
selecting invalid interface %d
ERROR, too many USB Devices, max=%d
usb_new_device:cannot locate device's port.
     Couldn't reset port %i
      USB device not accepting new address (error=%lX)
unable to get device descriptor (error=%d)
USB device descriptor short read (expected %i, got %i)
usb_new_device: Cannot read configuration, skipping device %04x:%04x
 ERROR: NOT USB_CONFIG_DESC %x
failed to set default configuration len %d, status %lX
scanning bus %d for devices... 
%d USB Device(s) found
No USB Device found
lowlevel init failed
USB error: all controllers failed lowlevel init
cannot reset port %i!?
ERROR: USB_MAX_HUB (%d) reached
	Did not get interrupt on CBI
cmd 0x%02X returned 0x%02X 0x%02X 0x%02X 0x%02X (NOT READY)
cmd 0x%02X returned 0x%02X 0x%02X 0x%02X 0x%02X
No storage devices, perhaps not 'usb start'ed..?
USB Storage Transport unknown / not yet implemented
Sorry, protocol %d not yet supported.
error in inquiry
Device NOT ready
   Request Sense returned %02X %02X %02X
READ_CAP ERROR
       scanning usb for storage devices... 
max USB Storage Device reached: %d stopping
%d Storage Device(s) found
xyzModem - %s mode, %d(SOH)/%d(STX)/%d(CAN) packets, %d retries
Unknown error
Block sequence error
CRC/checksum error
Invalid framing
End of file
Sorry, zModem not available yet
Can't access file
(%d:%d) Vendor: %s Prod.: %s Rev: %s
Model: %s Firm: %s Ser#: %s
Vendor: %s Rev: %s Prod: %s
device type DOC
device type unknown
Unhandled device type: %i
            Type: 
Removable 
Optical Device
            Capacity: %ld.%ld MB = %ld.%ld GB (%ld x %ld)
            Capacity: not available
Partition Map for 
 device %d  --   Partition Type: %s
## Unknown partition table
** Bad device specification %s %s **
** Bad device %s %s **
bootdevice
** No device specified **
** Bad partition specification %s %s **
** Bad device size - %s %s **
** No partition table - %s %s **
Whole Disk
** Invalid partition %d **
** No valid partitions found **
** Invalid partition type "%.32s" (expect "U-Boot")
** Can't read partition table on %d:%d **
bad MBR sector signature 0x%02x%02x
%3d	%-10d	%-10d	%08x-%02x	%02x%s%s
Part	Start Sector	Num Sectors	UUID		Type
Status Error: 0x%08X
Timeout waiting card ready
mmc send ext_csd failed
mmc switch boot bus width failed
mmc switch failed
MMC Device %d not found
Caution! Your devices Erase group is 0x%x
The erase range would be change to 0x%lx~0x%lx
mmc erase failed
MMC: block number 0x%lx exceeds max(0x%lx)
mmc write failed
mmc fail to send stop cmd
Man %06x Snr %04x%04x
%c%c%c%c%c%c
MMC: no card present
Card did not respond to voltage select!
SDR + backward compatiible timings in boot mode
SDR + high speed timings in boot mode
DDR in boot mode
x1(sdr) or x4(ddr) bus width in boot mode
x4(sdr/ddr) bus width in boot mode
x8(sdr/ddr) bus width in boot mode
Boot ack sent during boot operation
No boot ack sent
device no boot enable
Boot partition 1 enabled for boot
Boot partition 2 enable for boot
User area enabled for boot
No access to boot partition
R/W boot partition 1
R/W boot partition 2
Access to General Purpose partition 1
Access to General Purpose partition 2
Access to General Purpose partition 3
Access to General Purpose partition 4
can not get proper divisor
wait for emmc internal clk stable...
emmc data buffer must %dbyte align !
Wait for emmc bus idle !
emmc read op error !
emmc card status bad !
emmc read dma transfer fail !
emmd read dma timeout !
emmc write op error !
emmc write dma transfer fail !
emmc write dma timeout !
rate(%ld) is out of range
Invalid bus width: %d
wait for sdc sw reset stable...
nt72668 emmc
SF: write status register timed out
SF: Unsupported manufacturer %02x
SF: Detected %s with page size 
SF: Timed out on command %02x: %d
SF: Write protect failed
SF: Winbond: Successfully programmed %u bytes @ 0x%x
SF: Enabling Write failed
SF: Failed to unlock status for cmd %02x: %d
SF: Winbond sector erase timed out
SF:Quad enable failed and fast read is used
SF:Quad mode is enabled
Cannot find console
## Baudrate %d bps not supported
## Baudrate may not be deleted
** Can not find directory. **
Error in ext4fs_log_gdt
Error in getting the block group descriptor table
error in File System init
Not enough space on partition !!!
Error in copying content
part_offset is %lu
total_sector is %llu
error: overflow occurs
no block left to assign
%s: Device read error!
no block left assign
no block left
Extent Error
** SI ext2fs read block (indir 1)malloc failed. **
** SI ext2fs read block (indir 1):malloc failed. **
** SI ext2fs read block (indir 1)failed. **
** DI ext2fs read block (indir 2 1)malloc failed. **
** DI ext2fs read block (indir 2 1)failed. **
** DI ext2fs read block (indir 2 2)malloc failed. **
** DI ext2fs read block (indir 2 2)failed. **
** TI ext2fs read block (indir 2 1)malloc failed. **
** TI ext2fs read block (indir 2 1)failed. **
** TI ext2fs read block (indir 2 2)malloc failed. **
** TI ext2fs read block (indir 2 2)failed. **
invalid extent block
file found deleting
Please supply Absolute path
Invalid path
It is a Directory
1st Block Full:Allocate new block
Directory exceeds limit
no inode left to assign
Failed to mount ext2 filesystem...
%s read outside partition %d
** Invalid Block Device Descriptor (NULL)
 ** ext2fs_devread() read error **
 ** %s read error - block
* %s read error - last part
Invalid input arguments %s
total bytes %d
revoke blknr is %ld
buffer ptr is NULL
_get_node: malloc failed
Journal Recovery Completed
Journal Scan Completed
Recovery required
File System is consistent
update journal finished
FAT: Misaligned buffer address (%p)
Invalid FAT entry
error: wrinting directory entry
Error: reading directory block
Error: %ld overflow
Error: writing contents
Error: flush fat buffer
Error: writing directory entry
Error: finding empty cluster
Error: clearing FAT entries
** Partition %d not valid on device %d **
Error: FAT sector size mismatch (fs=%hu, dev=%lu)
            %s%c
 %8ld   %s%c
%d file(s), %d dir(s)
Error reading cluster
No current device
Interface:  
  Device %d: 
No valid FAT fs found
Filesystem: %s "%s"
reading %s
writing %s
Can't list files without a filesystem!
Can't load file without a filesystem!
** Unrecognized filesystem type **
** Unable to read file %s **
** Cannot support non-zero offset **
** File not found %s **
** No boot file defined **
%d bytes read in %lu ms
compatible
<valid offset/length>
<no error>
<unknown error>
FDT_ERR_NOTFOUND
FDT_ERR_EXISTS
FDT_ERR_NOSPACE
FDT_ERR_BADOFFSET
FDT_ERR_BADPATH
FDT_ERR_BADSTATE
FDT_ERR_TRUNCATED
FDT_ERR_BADMAGIC
FDT_ERR_BADVERSION
FDT_ERR_BADSTRUCTURE
FDT_ERR_BADLAYOUT
%llu Bytes%s
Error: inflateInit2() returned %d
Error: inflate() returned %d
Error: Bad gzipped data
Error: gunzip out of data in header
Env export buffer too small: %zu, but need %zu
himport_r: can't insert "%s=%s" into hash table
WARNING: '%s' neither in running nor in imported env!
WARNING: '%s' not in imported env, deleting it!
ERROR: Failed to allocate 0x%lx bytes below 0x%lx.
%s:%u: %s: Assertion `%s' failed.
invalid distance too far back
invalid distance code
invalid literal/length code
incorrect header check
unknown compression method
invalid window size
unknown header flags set
header crc mismatch
invalid block type
invalid stored block lengths
too many length or distance symbols
invalid code lengths set
invalid bit length repeat
invalid literal/lengths set
invalid distances set
incorrect data check
incorrect length check
need dictionary
stream end
file error
stream error
data error
insufficient memory
buffer error
incompatible version
Unknown command (0x%x) type(Winbond)
...........
table id error[size:0x%x, id[%d]!!
Don't support cmd[0x%x]/id[%d]!!
spi_xfer: Cmd parse fail..
DDRS: %d MB
DDR CHID REG: 0X%X
DDR CHID VAL: 0X%X
DDR GPIO REG: 0X%X
DDR GPIO VAL: 0X%X
DDR GPIO MSK: 0X%X
CPU:  %d MHz x %d COREs
AXI:  %d MHz
AHB:  %d MHz
DDR:  %d MHz
EMMC: %d MHz
set tclupgrade
ebootflag 0 0 0
ebootflag 0 0 0
333 device exist
324 device exist
can't start usb 0 ! 
fatload usb 0 0x%x 333.bin
fatload usb 0 0x%x 324.bin
324 update img not exist! 
No 324 device exist
ewrite mloader
write mloader fail ...!
write mloader done ...
ewrite ddrcfg
write DDR config fail ...!
write DDR config done ...
swrite stbc
write STBC fail ...!
write STBC done ...
ewrite logo
write logo fail ...!
write logo done ...
ewrite stbc stbc_emmc.bin
write STBC_EMMC fail ...!
write STBC_EMMC done ...
ewrite secos secos.bin
write secos fail ...!
write secos done ...
ewrite vtable  vtbl.bin
write vtable fail ...!
write vtable done ...
ewrite uboot
write U-Boot fail ...!
write U-Boot done...
epart write
write partition fail ...!
write partition done ...
ewrite uboot_bk
write uboot_bk fail ...!
write uboot_bk done...
ewrite ker0
write kernel fail ...!
write kernel done...
ewrite ker1
write recovery fail ...!
write recovery done...
ewrite tvos
write tvos fail ...!
write tvos done...
ewrite system
write system fail ...!
write system done...
ewrite database
write database fail ...!
write database done...
ewrite tclconfig
write tclconfig fail ...!
write tclconfig done...
UPGRADE_ENV
eupdateflag 
save done ...
Burning image process complete, please reboot this device.
ext4write mmc 0:%x /netflix 0x0 0
ext4write error!
%s timeout !
stbc stay in sram command timeout !
ext4load mmc 0:%d 0x%x %s 0x%x
project_id.bin
Read file error!
project id: %d
stbc lock keypad command timeout !
stbc_nova_data.bin
Read file stbc_nova_data.bin error!
LED status no update
stbc unlock keypad command timeout !
stbc enable cec command timeout !
stbc disable cec command timeout !
stbc shutdown arm command timeout !
power_mode.bin
Read file error, use default settings!
usr_stbc.bin
enable wdog no response !
disable wdog no response !
Power on AC!
Power on IR!
Power on Key pad!
Power on Alarm time match!
Power on CEC!
Power on SCART wake up!
Power on watchdog time out!
Power on reboot!
Power on long press Key pad!
Power on Netflix power key!
Power on unknown event 0x%x!
%2.2x:%2.2x:%2.2x:%2.2x:%2.2x:%2.2x
STBC clock is 12MHz
STBC clock is 6MHz
STBC clock is 3MHz
wrong KeypadLockFlag!
wrong CecAutoPowerOnMode!
Power on mode: Always on!
Power on mode: Always off!
Power on mode: last mode is Standby!
Power on mode: last mode is On!
halt - halt system
       halt system
reboot - reboot system
       reboot system
PTYPE_EMPTY
PTYPE_FAT12
PTYPE_FAT16
PTYPE_MSEXT_CHS
PTYPE_FAT16L
PTYPE_NTFS
PTYPE_FAT32_CHS
PTYPE_FAT32_LBA
PTYPE_FAT16_LBA
PTYPE_MSEXT_LBA
PTYPE_HFAT12_CHS
PTYPE_HFAT16_LCHS
PTYPE_HFAT16_MCHS
PTYPE_HFAT32_CHS
PTYPE_HFAT32_LBA
PTYPE_HFAT16_LBA
PTYPE_MSMBR
PTYPE_LINUX_SWAP
PTYPE_LINUX_FS
PTYPE_HIBERNATION1
PTYPE_LINUX_EXT
PTYPE_NTFS_VOL1
PTYPE_NTFS_VOL2
PTYPE_HIBERNATION2
PTYPE_HIBERNATION3
PTYPE_FREEBSD
PTYPE_OPENBSD
PTYPE_MAC_OSX
PTYEP_NETBSD
PTYPE_MAC_OSX_BOOT
PTYPE_BSDI
PTYPE_BSDI_SWAP
PTYPE_EFI_GPT
PTYPE_EFI_SYSPART
PTYPE_VM_FS
PTYPE_VM_SWAP
Error ! Table is null
mmc read 0x%x 0x%x 0x1
read mbr entry error !
Invalid mbr entry !
Parrtition too much !
primary_offset = %d
total partition sectors(%lu) large than disk space(%lu) ! Stop create partition table !
dram mbr table is null !
mmc write 0x%x 0x%x 1
write device fail ! abort to write parition table !
fs_type:%s start:(%d) len:%d
Invalid table pointer !
id:%d start:%d end:%d len:%d
fs_type:%s  start:%d(%d) end:%d len:%d
id or fs partition table invalid !
image size too large , abort update partition !
mmc write 0x%x 0x%x 0x%x
write to file system partition fail !
%s create dram mbr table fail !
%s create fs table fail !
PART:%d start:%d end:%d len:%d
nvtload 0x%x %s
%s read file fail !
partition file %s read error !
EMMC partition tool
epart info - print current firmware partition setting
epart read - read current emmc partition
epart write - write partition table to emmc (this may destroy all data on emmc chip, make sure you know what you are doing)
mloader.bin
668_ddr_cfg.ddr
u-boot.sig
ubootdat.bin
secos_nfsk.bin
impdat.img
tclconfig.img
system_ext4.img
out of buffer pointers (%u bytes left)
unable to allocate TDs
unable to construct SETUP TD
unable to construct DATA TD
EHCI fail timeout STS_ASS set
EHCI timed out on TD - token=%#x
EHCI fail timeout STS_ASS reset
The request port(%d) is not configured
port(%d) reset error
EHCI fail to reset
USB EHCI %x.%02x
%s: Interrupt transfers requiring several transactions are not supported.
do_tcl_erase 000000000000
erase %d:%s
668_ddr.ddr
ddr config partition not exist !
read ddr config from emmc error !
usb storage not ready !
fatwrite usb 0:1 0x%x %s 0x%x
write ddr config to usb fail !
%s: unknown image name %s
%s invalid image name : %s
eread image error !
image read to 0x%x, len = 0x%x
do_tcl_update_flag 000000000000000000
tcleu_boot tcl_upgrade
dump_restore
nvt_boot;bootm ${kernel_loadaddr} ${ramdisk_loadaddr}
Run into recovery fail !
emmc-restore
%s get misc partition fail !
ewrite_boot_logo fail...
%s init usb fail !
fatload usb 0 0x%x %s 0x%x 0x%x
read image file %s error !
%s image size large than partition size, update fail !
write image file %s error !
%s : invalid image !
Usage: eread buffer_addr %s
Usage: ewrite %s [%s]
Usage: eerase %s
mmc dev 0 1
%s: switch to boot partition 1 fail !
mmc dev 0 2
%s: switch to boot partition 2 fail !
mmc read 0x%x 0x%x 0x%x
%s read image fail !
mmc dev 0 0
%s: switch to user fail !
Checking for NFSK image.
nfsk: header verification failed
NFSK image verification failed!
NFSK image verified.
%s incorrect android boot.img !
read secos image fail !
header of secure OS is error !
%s error : image size(%d blks) large than partition size(%d blks) !
mmc rescan
%s write image fail !
%s erase image fail !
mmc read 0x%x 0x%x 1
 NVTFW_UPDATE_FLAG_BLK_ID:%x 
boot flag valid !
uidx : %d, kidx : %d, fidx : %d
update flag valid !
update ptable = 0X%X
%s switch to boot1 partition fail !
mmc erase 0 0x%x
%s erase boot1 partition fail !
%s switch to boot2 partition fail !
%s erase boot2 partition fail !
%s switch to user partition fail !
%s erase user partition fail !
eeraseall - erase all images on emmc
eeraseall fast || full
ereadflag - read current boot flag and update flag
ebootflag - write boot flag to misc partition
ebootflag uboot_idx kernel_idx fs_idx
tcl_upgrade - tcl write update flag to misc partition
eupdateflag update_ptbl(0/1)
eupdateflag
eupdateflag - write update flag to misc partition
tcl_restore
tcl_restore - tcl restore emmc partition from U-disk
erestore - restore emmc partition from U-disk
tcl_dump_for_programmer
tcl_dump - tcl dump emmc image to U-disk for programmer
eupm - dump emmc image to U-disk
tcl_dump - tcl dump emmc partition to U-disk
edump - dump emmc partition to U-disk
emiscmd - write misc command to misc partition
eread - read image from emmc partition to dram
       use "eread help" to get more information
egetddr - get ddr setting from board
      fname - add fname parameter to specify saved file name, or else default name is 668_ddr.ddr 
tcl_erase - tcl erase partitions except uboot & kernel
       use "eerase help" to get more information
eerase - erase image from emmc partition
ewrite - write image to emmc partition
       use "ewrite help" to get more information
 tclupgrade to burn:*********** 
do_tcleu_boot_cmd flag = %d, argc = %d, %s
%s %s, hotkey_update:%d
hotkey_update2:%d
 ADC1 press : upgrade SW...
 no frc  file ---324.bin 
frc update
write frc update fail ...!
fatload usb 0 0x%x %s 4
tclupgrade.ing
 find tclupgrade.ing ,enter empty upgrade process!
set tclupgrade 1
 not  find tclupgrade.ing 
update.img
ooooooooooooooooooooooooooooooooo22222
console=%s,115200 
console=ttyS0,115200
mali.mali_active_cores=%s 
mali_start
mali.mali_dedicated_mem_start=%s mali.mali_dedicated_mem_size=%s 
mali_share
mali.mali_shared_mem_size=%s 
ump.ump_memory_address=%s ump.ump_memory_size=%s 
mali_fb_start
mali_fb_size
mali.mali_fb_start=%s mali.mali_fb_size=%s 
dtv_log_addr
dtv_log_addr=%s 
ethaddr=%s 
root=%s rw 
ramdisk_loadaddr
root=/dev/ram0 rw 
emiscmd HOTKEY_UPDATE
 2222222detect update flag!
root=/dev/mmcblk0p%d ro 
root=/dev/mmcblk0p%d rw 
rootfstype=ext4 
vmalloc=560M 
maxcpus=%d 
rdinit=/linuxrc rootwait 
init=/init rootwait
kparam_addon
%s get secos image fail !
kernel_loadaddr
nvtload 0x%x p3.img
%s get normal kernel image fail !
yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyooooooooooooooo2222
initrd=0x%x,0x%x
start ramdisk 00000000000000000000000000000
load kernel0 from emmc fail !
load recovery ker1 from emmc fail !
ump_backend
ump.ump_backend=%s 
init=/init rootwait 
%s get misc image fail !
load MISC from emmc fail !
command=%s
boot-recovery
%s get recovery kernel image fail !
load kernel 1 from emmc fail !
load kernel 0 from emmc fail !
tcleu_boot
Unknown spi partition !
load %s from usb fail !
Unknown SPI flash sector size !
Error ! Image size too large !, image size = %d, partition size = %d
sf erase %x %x
erase spi partition fail !
sf write %x %x %x
write image to spi partition fail !
stbcdat.bin
nvt-uboot.bin
rootfs.img
swrite    - write image to spi flash
all - write all images into spi flash
uboot - write uboot image into spi flash [default file name:nvt-uboot.bin]
stbc - write stbc image into spi flash [default file name:stbc.bin]
stbcdat - write stbc data image into spi flash [default file name:stbcdat.bin]
ker - write kernel image into spi flash [default file name:rootfs.img]
fs - write root file system image into spi flash [default file name:rootfs.img]
u16BackLightLevel
stMode60Hz.u16Width
stMode60Hz.u16Height
stMode60Hz.u16TypHTotal
stMode60Hz.u8HSyncWidth
stMode60Hz.u16HSyncBackPorch
stMode60Hz.u16HSyncStart
stMode60Hz.u16TypVTotal
u16VTotalDiff_Max
stMode60Hz.u8VSyncWidth
stMode60Hz.u16VSyncBackPorch
stMode60Hz.u16VSyncStart
u16LVDSPhase
b8DualPixelOutput
b8ChannelSwap
b8FrameSyncEnable
u8FrameSyncMode
stMode60Hz.u16PLL
u8DitheringBit
enLvdsFormat
u16PanelTiming2D
u16PWM2DSync
b8GammaTruncate
b8ForcePanelTiming2D
u16PDIMFreq2D60Hz
Slave device NACK!
timeout failed!
gu8SepMode == SEPARATE_MODE
gu8SepMode != SEPARATE_MODE
_Out_P_SetLvdsFormat() ERROR
u16ADIMFreq2D50Hz
admim 703333333
u8PanelType
u16PanelPowerOnDelay1
u16PanelPowerOnDelay2
frc writeMB 0x0E 0x08 0x0
[Yuchi] add u16PanelPowerOnDelay2 
999999999999999999999999999999999999999999
fatload usb 0 0x%x %s
frc writeMB 0x02 0xFF 0x01
frc writeMB 0x0E 0x03 1
frc writeMB 0x05 0x01 1000
frc writeMB 0x05 0x9 0x1
frc writeMB 0x05 0x10 0x0
frc writeMB 0x05 0x11 1000
frc writeMB 0x05 0x12 120
frc writeMB 0x05 0x13 0x1
frc writeMB 0x05 0x10 0x1
ext4load mmc 0:%x 0x%x sys.ini
ext4load mmc 0:%x 0x%x %s
m_pPanelName
env default -a
UPGRADE_FRC
ext4load mmc 0:0x%x 0x%x %s 0x%x
 no frc  file ----FRC_.div 
set UPGRADE_FRC;save
 frc  file ---FRC.div 
 update FRC from update.img********** 
u8PanelPartition
 panel gPanelpartition = %d 
u8TconType
set panel RES 1980*1080!
set panel RES 4k
 panel partition 6666888   
oooooooooooooooooooooo222222222222222
PWM defult last 400ms
777777777777777777777777
u16I2cDelay
21212324343444444444444444444444444444444444444444444update
 508  : TCON  Panel 
set u16ADIMFreq2D50Hz %d
uuuuuuuuuuuuuuuuuuuuttttttttttttt22222222
  PRV mode : TCON  Panel BackLight OFF!
AU & CN Backlight ON!
Backlight ONtttttttttttttttttttttttttttttrrrrrrrrrrrrrr!
b8LocalDIMControl
[Yuchi] add LocalDIMControl22 u16PanelPowerOnDelay2 
backlight====================on
 508  : TCON22222222222223333444  Panel 
 wait T500QVN02.0 stable cost 20ms*%d !!!
 RD T500QVN02.0 panel ADDR 0%x failed!
 WT T500QVN02.0 panel ADDR 0%x failed!
 set T500QVN02.0 to one section --->done!
 set T500QVN02.0222222222 to one section %s!!!
Successful
set panel RES222222 1980*1080!
 panel partition 1   
 panel partition 66668889999   
 508	: TCON	Panel 
66666666666665555555555555555555555555555
u16I2cInterval
pancommand2222================================
set u16I2cInterval:(%d)
FHD 8903  Write TCON I2C  _Command%d  failed
 FHD 8905 Write TCON I2C  _Command%d  failed
FHD 8906 Write TCON I2C  _Command%d  failed
Write TCON I2C  _Command0  failed
Write TCON I2C  _Command1  failed
Write TCON I2C  _Command2  failed
Write TCON I2C  _Command3  failed
LOCAL_DIM_ENV
Mstar 9805  Enable_LocalDIMControl  ON
Mstar 9805  Enable_LocalDIMControl  OFF
b8LocalDIMControl gu8TconType222222222222 = %d  
AGE not finish
Source color no support
image info:width (%d) height (%d) offset (0x%lx) u32ImageLength (0x%lx) u16ColorSpace (%d) u8RestartInterval (%d)
%s %d: ERR! Only Supports 1 & 3 & 4 Components
%s %d : ERR! Invalid Frame Size
%s %d: ERR! Component U Should Equal to V
%s %d: ERR! Component Y Should Be Larger Then U & V
%s %d:  ERR! Not Support Components
[%s][%d]Invalid Magic Num <12345678> !
[%s][%d]Invalid Magic Num <87654321> !
[ERROR][%s]Please check input or output parameters!
Unknow data (%x)
[ERROR][%s]DataError (%d) Read End (%d) Ret (%d)
******************************
[ERROR] Not Baseline JPEG, Unsupport!!
[ERROR] Unsupport Color Fomat, must be YUV420 or YUV444!!
[%s]Input JPEG lenght is %d
header size (0x%x)
image width (%d)
image height (%d)
image start offset (0x%x)
image length (0x%x)
color space (%d)
restart interval (%d) (0x%x)
Q table size(%d)
huffman table size(%d)
Conguratulations! JPEG Conver Success!
Request to start secos
Start to wait secos
Finish to wait secos
81D116FCCCA921334AC77D63CE1A72935055328F7EC82A6147B704A7FFF4082D880A823EC66E776D881E9586B2A5BF55D2E806C07233C5B6337B8FC8B037DA1FA4A2B865C20CA76BD0F7634736F342D09666B428CCB918172CE4BE83FB39E4F801E209714ACD74299FE10D0945E5E437FA42BA2E8BCFE1D1D6953BD4915F0585EB95AC23EE5E4D8B3DFD32D44328E4DEE348F37CDD096CDADFFD042BDB1A8D1B8D5518D2054A80E90089985F06BB4CB0FC74757DDD5C39C8D34AFC5BAFA96609B0239674D74E8B69BCA0AB4144C95DD3985C07E133288C608BB0E1A367575E64A32DF137C28535E64196D1DFB5EF844450EE79035B202BE131548790C0139565
Write FRC register 0x%x failed
i2c write failed
i2c read failed
FRC write mailbox failed!
read addr 0x%x value 0x%x
 uboot 333  
 uboot 324  
%s: start to delay 1000 ms
%s: finish to delay 1000 ms
IIC fail to write data!!
 DEV_FRC_BurstWrite fail in %s 
ext4load mmc 0:0x0E 0x%x %s 0x%x
 222 cmd:%s
DEV_FRC_ROM_UpdateCode: load /etc/333.bin file error!
DEV_FRC_ROM_UpdateCode: load /etc/324.bin file error!
--- Update Subprogram code...sub_addr = %x .sub_up_addr = %x.u32sub_size = %d.!
Update Subprogram code.......Error!
--- Send Subprogram Password.......!
Update flash code.......Error!
Wait Subprogram Password.......Error!u32value = %x
Update flash code.......!
For Rev.B Update by DEV_FRC_UPD_LoadData_Alt!u32value = %x
--- Update flash code...floader_addr = %x .floader_up_addr = %x.floader_size = %d.!
Wait flash code Password.......Error!u32value = %x
--- get flash code Password...... !
%s Done!!!
in %s fr333Read Back Version fail
FRC333 version is ver.%x
in %s Read Back Version fail
FRC version is ver.%x
Write 324 register 0x%x failed!
Write 324 register 0x%x success
Read 324 register 0x%x failed!
[0x%x] = 0x%x
Write 324 via mailbox mode failed!
Read 324 via mailbox failed!
Read value = 0x%x via 324 mailbox success
324 unlock success!
324 unlock failed!
324 device exist, slave id = 0x%x
[FRC] PWM SYNC Mode
[FRC] PWM FREE RUN Mode
324 Enable_LocalDIMControl  ON
324 Enable_LocalDIMControl  OFF
Mode is illegal 
[Yuchi] not to set 4K2K60! 
[Yuchi] 2D force 120Hz out! 
324 frc control cmd
check - check 324 exist or not
frc unlock - unlock 324
frc readreg - read 324 register [ frc readreg addr ]
frc writereg - write 324 register [ frc writereg addr val ]
frc readMB - read value via 324 mailbox interface [ frc readMB api sub ]
frc writeMB - write value via 324 mailbox interface [ frc writeMB api sub value ]
frc update - update 324 fw [ frc update ]
frc version - read 324 fw version[ frc version ]
BS%d : %01x
Boot from STBC, Using STBC MaskROM
Boot from CPU, Using STBC MaskROM
Boot from STBC, Bypass STBC MaskROM
Boot from CPU, Bypass STBC MaskROM
Disable STBC watchdog
Enable STBC watchdog
STBC boot from SPI, CPU boot from NANS (NAND 2 Row adderess cycles)
STBC boot from SPI, CPU boot from NAND (NAND 3 Row address cycles)
STBC & CPU boot from SPI, CPU SPI use 12MHz OSC
STBC & CPU boot from SPI, CPU SPI use 24MHz MPLL(need to bypass STBC)
STBC & CPU boot from NAND (NAND 2 Row address cycles)
STBC boot from SPI, CPU boot from eMMC
STBC & CPU boot from NAND (NAND 3 Row address cycles)
STBC & CPU boot from eMMC
internal boot strap disable
internal boot strap enable
NAND Page size : 512 bytes
NAND Page size : 2048 bytes
NAND Page size : 4096 bytes
NAND Page size : 8192 bytes
EMMC Bus width is 1 bit
EMMC Bus width is 4 bit
EMMC Bus width is 8 bit
NAND Block size : 128 Kbytes
NAND Block size : 256 Kbytes
NAND Block size : 512 Kbytes
NAND Block size : 1 Mbytes
NAND Block size : 2 Mbytes
EMMC_REG in 5K mode
EMMC Data rate in ddr mode
EMMC Data rate in sdr mode
NAND boot flow : boot from ROM then emulator
NAND boot flow : boot from ROM then SRAM
EMMC Clock in 13 MHz
EMMC Clock in 26 MHz
ss security boot disable 
ss security boot enable 
Scramble disable
Scramble enable
NAND ECC mode : RS
NAND ECC mode : BCH
tk security boot disable 
tk security boot enable 
NAND 512 page size support disable
NAND 512 page size support enable
nvtusbstart
USB open fail
usage: <addr> <filename> [bytes]
batch for usb, fatls and fatload commands
batch for usb start
 - start usb
nvtusbstart - start usb
 - display usb content 
nvtload - load binary file from a dos filesystem  <addr> <filename> [bytes]
	 - load binary file 'filename' from 'dev' on 'interface'
	   to address 'addr' from dos filesystem
bstarp    - print nt72668 bootstrap info
raise: Signal # %d caught
[addr [initrd[:size]] [fdt]]
    - boot Linux zImage stored in memory
	The argument 'initrd' is optional and specifies the address
	of the initrd in memory. The optional argument ':size' allows
	specifying the size of RAW initrd.
	When booting a Linux kernel which requires a flat device-tree
	a third argument is required which is the address of the
	device-tree blob. To boot that kernel without an initrd image,
	use a '-' for the second argument. If you do not pass a third
	a bd_info struct will be passed instead
[addr [arg ...]]
    - boot application image stored in memory
	passing arguments 'arg ...'; when booting a Linux kernel,
	'arg' can be the address of an initrd image
	When booting a Linux kernel which requires a flat device-tree
	a third argument is required which is the address of the
	device-tree blob. To boot that kernel without an initrd image,
	use a '-' for the second argument. If you do not pass a third
	a bd_info struct will be passed instead
Sub-commands to do part of the bootm sequence.  The sub-commands must be
issued in the order below (it's ok to not issue all sub-commands):
	start [addr [arg ...]]
	loados  - load OS image
	fdt     - relocate flat device tree
	cmdline - OS specific command line processing/setup
	bdt     - OS specific bd_t processing
	prep    - OS specific prep before relocation or go
	go      - start OS
																																
addr   <addr> [<length>]        - Set the fdt location to <addr>
fdt move   <fdt> <newaddr> <length> - Copy the fdt to <addr> and make it active
fdt resize                          - Resize fdt to size + padding to 4k addr
fdt print  <path> [<prop>]          - Recursive print starting at <path>
fdt list   <path> [<prop>]          - Print one level starting at <path>
fdt get value <var> <path> <prop>   - Get <property> and store in <var>
fdt get name <var> <path> <index>   - Get name of node <index> and store in <var>
fdt get addr <var> <path> <prop>    - Get start address of <property> and store in <var>
fdt get size <var> <path> [<prop>]  - Get size of [<property>] or num nodes and store in <var>
fdt set    <path> <prop> [<val>]    - Set <property> [to <val>]
fdt mknode <path> <node>            - Create a new node after <path>
fdt rm     <path> [<prop>]          - Delete the node or <property>
fdt header                          - Display header info
fdt bootcpu <id>                    - Set boot cpuid
fdt memory <addr> <size>            - Add/Update memory node
fdt rsvmem print                    - Show current mem reserves
fdt rsvmem add <addr> <size>        - Add a mem reserve
fdt rsvmem delete <index>           - Delete a mem reserves
fdt chosen [<start> <end>]          - Add/update the /chosen branch in the tree
                                        <start>/<end> - initrd start/end addr
NOTE: Dereference aliases by omiting the leading '/', e.g. fdt print ethernet0.
default [-f] -a - [forcibly] reset default environment
env default [-f] var [...] - [forcibly] reset variable(s) to their default values
env delete [-f] var [...] - [forcibly] delete variable(s)
env export [-t | -b | -c] [-s size] addr [var ...] - export environment
env import [-d] [-t | -b | -c] addr [size] - import environment
env print [-a | name ...] - print environment
env run var [...] - run commands in an environment variable
env save - save environment
env set [-f] name [arg ...]
!@#$%^&*()_+
	QWERTYUIOP{}
ASDFGHJKL:"~
|ZXCVBNM<>?
789-456+1230.
789-456+1230.
nt72668_serial
