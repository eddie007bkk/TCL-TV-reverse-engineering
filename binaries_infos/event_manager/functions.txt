File /home/liuxiaofeng/samba/svn_mw/TMER/core/eventmanager/appmngr_task_queue.c:
APPMGR_ProcessCB *appmngr_task_item_get_back_end(APPMGR_TaskStack *, APPMGR_ProcessCB *);
APPMGR_ProcessCB *appmngr_task_item_get_front_end(APPMGR_TaskStack *, APPMGR_ProcessCB *);
APPMNGR_RETVALUE appmngr_task_item_remove_and_free(APPMGR_ProcessCB *);
APPMNGR_RETVALUE appmngr_task_list_remove(APPMGR_TaskStack *);
APPMNGR_RETVALUE appmngr_taskstack_construct(APPMGR_TaskStack *);
void appmngr_taskstack_release(APPMGR_TaskStack *);
APPMGR_TaskStack *create_taskQ_ctrl_obj(void);
int deinit_task_queue_mem(QMEM_MANAGER_ST *);
void dump_event_task(APPMGR_ProcessCB *);
void dump_event_taskQ(APPMGR_ProcessCB *);
int free_task_queue_mem(void *);
APPMNGR_RETVALUE init_taskQ_ctrl_obj(APPMGR_TaskStack *);
int init_task_queue_mem(void);
unsigned char *malloc_task_queue_mem(void);
static APPMGR_ProcessCB *appmngr_taskstack_find_item(APPMGR_TaskStack *, int, void *);
static int appmngr_taskstack_find_item_group(APPMGR_TaskStack *, int, void *, unsigned int *, int *);
static int appmngr_taskstack_get_sockfd(APPMGR_TaskStack *, int, int);
static APPMNGR_RETVALUE appmngr_taskstack_insert_item(APPMGR_TaskStack *, APPMGR_ProcessCB *);
static APPMNGR_RETVALUE appmngr_taskstack_item_attach_input();
static APPMNGR_RETVALUE appmngr_taskstack_no_empty(APPMGR_TaskStack *);
static APPMNGR_RETVALUE appmngr_taskstack_remove_item(APPMGR_TaskStack *, APPMGR_ProcessCB *);
static APPMNGR_RETVALUE appmngr_taskstack_reset(APPMGR_TaskStack *);

File /home/liuxiaofeng/samba/svn_mw/TMER/core/eventmanager/sds.c:
size_t sdsavail(sds);
sds sdscat(sds, char *);
sds sdscatlen(sds, void *, size_t);
int sdscmp(sds, sds);
sds sdscpy(sds, char *);
sds sdscpylen(sds, char *, size_t);
sds sdsdup(const sds);
sds sdsempty(void);
void sdsfree(sds);
void sdsfreesplitres(sds *, int);
sds sdsfromlonglong(long long);
sds sdsgrowzero(sds, size_t);
size_t sdslen(const sds);
sds sdsnew(const char *);
sds sdsnewlen(const void *, size_t);
sds sdsrange(sds, int, int);
sds *sdssplitlen(char *, int, char *, int, int *);
void sdstolower(sds);
void sdstoupper(sds);
static sds sdsMakeRoomFor(sds, size_t);
static void sdsOomAbort(void);

File /home/liuxiaofeng/samba/svn_mw/TMER/core/eventmanager/appmngr_socket_server.c:
void _addReplyObjectToList(redisClient *, robj *);
int _addReplyToBuffer(redisClient *, char *, size_t);
int _installWriteEvent(redisClient *);
void acceptTcpHandler(aeEventLoop *, int, void *, int);
void acceptUnixHandler(aeEventLoop *, int, void *, int);
void addReply(redisClient *, robj *);
aeEventLoop *aeCreateEventLoop(void);
int aeCreateFileEvent(aeEventLoop *, int, int, aeFileProc *, void *);
long long aeCreateTimeEvent(aeEventLoop *, long long, aeTimeProc *, void *, aeEventFinalizerProc *);
void aeDeleteEventLoop(aeEventLoop *);
void aeDeleteFileEvent(aeEventLoop *, int, int);
int aeDeleteTimeEvent(aeEventLoop *, long long);
void aeMain(aeEventLoop *);
int aeProcessEvents(aeEventLoop *, int);
void aeSetBeforeSleepProc(aeEventLoop *, aeBeforeSleepProc *);
void aeStop(aeEventLoop *);
int aeWait(int, int, long long);
int anetNonBlock(char *, int);
int anetTcpAccept(char *, int, char *, int *);
int anetTcpNoDelay(char *, int);
int anetTcpServer(char *, int, char *);
int anetUnixAccept(char *, int);
int anetUnixServer(char *, char *);
int appmngr_server_free_client(int);
int appmngr_server_recv_packet(int, unsigned char *, int);
int appmngr_server_send_packet(int, int, unsigned char *, int);
redisClient *createClient(int);
robj *createObject(int, void *);
robj *createStringObject(char *, size_t);
int create_socket(const char *, int, mode_t, uid_t, gid_t);
void decrRefCount(void *);
robj *dupLastObjectIfNeeded(list *);
robj *dupStringObject(robj *);
void freeClient(redisClient *);
void freeObject(robj *);
int handle_property_set_fd(int, int);
void incrRefCount(robj *);
int init_socket_server_module(int, int *);
int lock_mutex_server(void);
int lock_send_buffer(void);
int main_test_svc();
int processCommand(redisClient *);
void processInputBuffer(redisClient *);
int process_client(int, char **);
void readQueryFromClient(aeEventLoop *, int, void *, int);
int recv_cred(int, struct ucred *, void *, unsigned int, void *, socklen_t *);
void resetClient(redisClient *);
void sendReplyToClient(aeEventLoop *, int, void *, int);
void sendReplyToClientWritev(aeEventLoop *, int, void *, int);
int send_cred(int);
int start_socket_service(const char *);
int test_server_unix_socket_simply(void);
int test_server_unix_socket_ucred(void);
void unblockClientWaitingData(redisClient *);
int unlock_mutex_server(void);
int unlock_send_buffer(void);
static void acceptCommonHandler(int);
static void aeGetTime(long *, long *);
static int anetCreateSocket(char *, int);
static int anetGenericAccept(char *, int, struct sockaddr *, socklen_t *);
static int anetListen(char *, int, struct sockaddr *, socklen_t);
static void anetSetError(char *, const char *, ...);
static void *socket_epoll_eventloop_thread(void *);

File /home/liuxiaofeng/samba/svn_mw/TMER/core/eventmanager/appmngr_parse_ini.c:
void PrintIniDataBase();
int ini_parser_create(char *);
int ini_parser_destory();
char *ini_parser_get_string(char *, char *);
static int LoadIniFile();

File /home/liuxiaofeng/samba/svn_mw/TMER/core/eventmanager/appmngr_ipc_socket.c:
int appmngr_ipc_broadcast_event_to_slaves();
int appmngr_ipc_post_remote_event(int, int, unsigned char *, int);
int appmngr_ipc_post_remote_event_directly(int, int, unsigned char *, int);
int appmngr_ipc_recv_remote_event(unsigned char *, int);
int appmngr_ipc_reply_to_remote_proc(int, const char *);
static int checksum_ok();

File /home/liuxiaofeng/samba/svn_mw/TMER/core/eventmanager/appmngr_event_queue.c:
void appmngr_eventqueue_add_item(APPMNGR_EventQueueCtrl *, APPMNGR_EventComm *);
APPMNGR_RETVALUE appmngr_eventqueue_construct(APPMNGR_EventQueueCtrl *);
APPMNGR_RETVALUE appmngr_eventqueue_control_with_cond(APPMNGR_EventQueueCtrl *, EN_EQ_CTRL_OPTION, void *);
void appmngr_eventqueue_destruct(APPMNGR_EventQueueCtrl *);
APPMNGR_RETVALUE appmngr_eventqueue_dispatch(APPMNGR_EventComm *);
APPMNGR_RETVALUE appmngr_eventqueue_filter_backend(APPMNGR_EventComm *);
APPMNGR_RETVALUE appmngr_eventqueue_filter_headend(APPMNGR_EventComm *);
APPMNGR_RETVALUE appmngr_eventqueue_getevent(APPMNGR_EventQueueCtrl *, APPMNGR_EventComm *);
APPMNGR_RETVALUE appmngr_eventqueue_hasevent(APPMNGR_EventQueueCtrl *);
APPMNGR_RETVALUE appmngr_eventqueue_peekevent(APPMNGR_EventQueueCtrl *, APPMNGR_EventComm *);
APPMNGR_RETVALUE appmngr_eventqueue_postevent(APPMNGR_EventQueueCtrl *, APPMNGR_EventComm *);
APPMNGR_RETVALUE appmngr_eventqueue_preprocess(APPMNGR_EventComm *);
int appmngr_eventqueue_release(struct APPMNGR_EventQ_Ctrl *);
APPMNGR_RETVALUE appmngr_eventqueue_reset(APPMNGR_EventQueueCtrl *);
APPMNGR_RETVALUE appmngr_eventqueue_waitevent(APPMNGR_EventQueueCtrl *);
APPMNGR_RETVALUE appmngr_eventqueue_waitevent_timeout(APPMNGR_EventQueueCtrl *, unsigned int, unsigned int);
APPMNGR_RETVALUE appmngr_eventqueue_wakeup(APPMNGR_EventQueueCtrl *);
APPMNGR_EventComm *appmngr_item_get_back_end(APPMNGR_EventQueueCtrl *, APPMNGR_EventComm *);
APPMNGR_EventComm *appmngr_item_get_front_end(APPMNGR_EventQueueCtrl *, APPMNGR_EventComm *);
APPMNGR_RETVALUE appmngr_item_remove_and_free(APPMNGR_EventComm *);
APPMNGR_RETVALUE appmngr_list_remove(APPMNGR_EventQueueCtrl *);
int appmngr_push_KeySet_event(int, PROCESS_MNGR_ACTION *);
int appmngr_push_decision_manage_event(int, void *);
int appmngr_push_input_directfb_event(DFBInputEvent *);
int appmngr_push_input_network_event(int, int, KEY_EVENT_COMM_T *);
int appmngr_push_process_manage_event(int, PROCESS_MNGR_ACTION *);
int appmngr_push_resource_manage_event(int, void *);
int appmngr_push_system_virtual_event(sysVirtualEvent *);
APPMNGR_EventQueueCtrl *create_eventQ_ctrl_obj(void);
int deinit_event_queue_mem(void);
void dump_event(APPMNGR_EventComm *, int, int);
int free_event_queue_mem(void *);
APPMNGR_EventQueueCtrl *get_eventQ_ctrl_obj(void);
int init_event_queue_mem(void);
unsigned char *malloc_event_queue_mem(void);

File /home/liuxiaofeng/samba/svn_mw/TMER/core/eventmanager/ApplicationManagerController.cpp:
ApplicationManagerController *ApplicationManagerController::ApplicationManagerController();
char ApplicationManagerController::SendCommandToApplicationManager(ApplicationManager::ControllerCommand);
int ApplicationManagerController::exec(char const*, char const*, void*, void*);
int ApplicationManagerController::exit();
int ApplicationManagerController::init();
void *ApplicationManagerController::test_writer_thread(void*);
int Do_Ctrl_Cmd_Netflix(char const*, char const*);
void amc_disable_netflix_key_event();
int amc_send_netflix_start_dummy();
int cmd_netflix_background();
int cmd_netflix_clear_user_accounts(int);
int cmd_netflix_down();
int cmd_netflix_enter();
int cmd_netflix_exit();
int cmd_netflix_left();
int cmd_netflix_reset_when_factory_default();
int cmd_netflix_resume();
int cmd_netflix_resume_link(char*);
int cmd_netflix_right();
int cmd_netflix_sigkill();
int cmd_netflix_sleep();
int cmd_netflix_start_by_button();
int cmd_netflix_start_by_dial(char*);
int cmd_netflix_start_by_icon();
int cmd_netflix_start_by_power_hotkey();
int cmd_netflix_start_foreground();
int cmd_netflix_start_suspend();
int cmd_netflix_stop_dial();
int cmd_netflix_stop_resources();
int cmd_netflix_stop_user(char const*);
int cmd_netflix_suspend();
int cmd_netflix_up();
int cmd_netflix_wake();
int exec_netflix_control_command(int, char*);
int init_netflix_manager_module();
int netflix_get_system_info(sys_info_t*, unsigned int);
int netflix_home_key_process();
int netflix_power_off_process();
int notify_netflix_exit_from_em(int);
int send_waiting_status_to_amc(int);
int wait_status_by_seconds(int, int);

File /home/liuxiaofeng/samba/svn_mw/TMER/core/eventmanager/appmngr_event_manager.c:
int init_input_capture(int, char **);
int main_thread_input_event_monitor(int, char **);
void print_timestamp(const char *);
static void *input_event_capture_thread(void *);

File /home/liuxiaofeng/samba/svn_mw/TMER/core/eventmanager/appmngr_resource_manager.c:
int appmngr_send_msg_to_resource_manager(APPMNGR_EventComm *);

File /home/liuxiaofeng/samba/svn_mw/TMER/core/eventmanager/appmngr_decision_manager.c:
int appmngr_send_msg_to_decision_manager(APPMNGR_EventComm *);

File /home/liuxiaofeng/samba/svn_mw/TMER/core/eventmanager/ApplicationManager.cpp:
ApplicationManager *ApplicationManager::ApplicationManager(int, int);
const char *ApplicationManager::ControllerCommandToString(ApplicationManager::ControllerCommand);
ApplicationManager::ControllerCommand ApplicationManager::GetCommandFromController();
void ApplicationManager::ListCommands();
char ApplicationManager::SendCommandToApplication(ApplicationManager::ClientCommand);
void ApplicationManager::SendReturnToController(char);
void ApplicationManager::SignalChild(int);
ApplicationManager::ControllerCommand ApplicationManager::StringToControllerCommand(char const*);
int ApplicationManager::doBackground();
int ApplicationManager::doExit();
int ApplicationManager::doKeyDown();
int ApplicationManager::doKeyEnter();
int ApplicationManager::doKeyLeft();
int ApplicationManager::doKeyRight();
int ApplicationManager::doKeyUp();
int ApplicationManager::doResume();
int ApplicationManager::doResumeLink();
int ApplicationManager::doSigKill();
int ApplicationManager::doSleep();
int ApplicationManager::doStartRunning();
int ApplicationManager::doStartSuspend();
int ApplicationManager::doStopDial();
int ApplicationManager::doStopLowResources();
int ApplicationManager::doStopUserKill();
int ApplicationManager::doSuspend();
int ApplicationManager::doWake();
void *ApplicationManager::exec(void*);
int ApplicationManager::exit_notify(void*, int);
int ApplicationManager::handleAction(ApplicationManager::ControllerCommand);
int ApplicationManager::init(char const*);
int ApplicationManager::killApplication();
int ApplicationManager::makeArgs_Q(char const*, ApplicationManager*);
int ApplicationManager::parse_cmdline(char const*, ApplicationManager::Args_Main*);
void ApplicationManager::setenv_firmware_version();
void ApplicationManager::setenv_frc_feature();
void ApplicationManager::setenv_model_name();
int ApplicationManager::startApplication(int, char**, bool);
int ApplicationManager::startApplication(int, char**, bool);
int ApplicationManager::stopApplication();
void *ApplicationManager::~ApplicationManager();
void disable_netflix_key_event();
void enable_netflix_key_event();
int get_netflix_process_status(int*);
int proc_netflix_exit_cleanup(int);

File /novatekoss/gcc-nt667_linux/bin/../lib/gcc/arm-linux-gnueabihf/4.7.3/../../../../arm-linux-gnueabihf/include/c++/4.7.3/bits/list.tcc:
void std::_List_base<ApplicationManager::actionEntry, std::allocator<ApplicationManager::actionEntry> >::_M_clear();

File /home/liuxiaofeng/samba/svn_mw/TMER/core/eventmanager/adlist.c:
list *listAddNodeHead(list *, void *);
list *listAddNodeTail(list *, void *);
list *listCreate(void);
void listDelNode(list *, listNode *);
list *listDup(list *);
listIter *listGetIterator(list *, int);
listNode *listIndex(list *, int);
list *listInsertNode(list *, listNode *, void *, int);
listNode *listNext(listIter *);
void listRelease(list *);
void listReleaseIterator(listIter *);
void listRewind(list *, listIter *);
void listRewindTail(list *, listIter *);
listNode *listSearchKey(list *, void *);

File /home/liuxiaofeng/samba/svn_mw/TMER/core/eventmanager/appmngr_queue_comm.c:
APPMNGR_RETVALUE appmngr_mutex_deinit(APPMNGR_Mutex *);
APPMNGR_RETVALUE appmngr_mutex_init(APPMNGR_Mutex *);
APPMNGR_RETVALUE appmngr_mutex_lock(APPMNGR_Mutex *);
APPMNGR_RETVALUE appmngr_mutex_trylock(APPMNGR_Mutex *);
APPMNGR_RETVALUE appmngr_mutex_unlock(APPMNGR_Mutex *);
APPMNGR_RETVALUE appmngr_recursive_mutex_init(APPMNGR_Mutex *);
APPMNGR_RETVALUE appmngr_waitcond_broadcast(APPMNGR_WaitCond *);
APPMNGR_RETVALUE appmngr_waitcond_deinit(APPMNGR_WaitCond *);
APPMNGR_RETVALUE appmngr_waitcond_init(APPMNGR_WaitCond *);
APPMNGR_RETVALUE appmngr_waitcond_signal(APPMNGR_WaitCond *);
APPMNGR_RETVALUE appmngr_waitcond_wait(APPMNGR_WaitCond *, APPMNGR_Mutex *);
APPMNGR_RETVALUE appmngr_waitcond_wait_timeout(APPMNGR_WaitCond *, APPMNGR_Mutex *, unsigned long);
int deinit_queue_mem(QMEM_MANAGER_ST *);
APPMNGR_RETVALUE errno_switch(int);
int free_queue_mem(QMEM_MANAGER_ST *, void *);
int init_queue_mem(QMEM_MANAGER_ST *, int);
unsigned char *malloc_queue_mem(QMEM_MANAGER_ST *);

File /home/liuxiaofeng/samba/svn_mw/TMER/core/eventmanager/appmngr_main.c:
int appmngr_monitor_process_status(int);
int check_network(const char *);
void config_network_check(int, char *);
void *event_queue_process_loop(void *);
int main(int, char **);
void start_event_loop_thread(evtQ_init_param *);

File /home/liuxiaofeng/samba/svn_mw/TMER/core/eventmanager/appmngr_process_manager.c:
void DUMP_service(void);
int add_environment(const char *, const char *);
int appmngr_adjust_keyset_by_proc_name(const char *, int, int, int);
void appmngr_dump_keySetArr(void);
int appmngr_dynamic_adjust_interactive_list(void);
APPMNGR_RETVALUE appmngr_input_event_preprocess(APPMNGR_EventComm *);
int appmngr_msg_broadcast_to_remote(APPMNGR_EventComm *);
int appmngr_notify_input_event_to_remote(APPMNGR_EventComm *);
int appmngr_notify_key_set_event_to_remote(APPMNGR_EventComm *);
int appmngr_pm_append_detached_process(struct list_head *, APPMGR_ProcessCB *);
int appmngr_pm_append_process_node(APPMGR_TaskStack *, char *, int, int);
int appmngr_pm_check_focus_process(void);
int appmngr_pm_clear_terminative_process(int, int, EN_RROC_EXIT_TYPE, void *);
int appmngr_pm_delete_process_node(APPMGR_ProcessCB *, APPMGR_TaskStack *);
int appmngr_pm_get_key_feedback(int);
int appmngr_pm_init_ini(void);
int appmngr_pm_init_rc(void);
int appmngr_pm_input_parse_remote_network(APPMGR_InputEvent *, KeySetNode **);
int appmngr_pm_input_parse_soft_keypad(APPMGR_InputEvent *, KeySetNode **);
int appmngr_pm_install_focus(void);
int appmngr_pm_key_set_delete(int);
int appmngr_pm_monitor_detached_process(void);
int appmngr_pm_post_msg_to_slave(int, PROCESS_MNGR_ACTION *);
APPMNGR_RETVALUE appmngr_pm_process_rm_pid(int);
int appmngr_pm_reset_process_node(APPMGR_ProcessCB *);
int appmngr_post_input_evt_directly(int, DFBInputEvent *);
int appmngr_send_msg_netflix_exit_dummy(void);
int appmngr_send_msg_netflix_start_dummy(void);
int appmngr_send_msg_to_task_manager(APPMNGR_EventComm *);
int appmngr_send_msg_to_ui_by_transpond(void);
int appmngr_system_event_process(APPMNGR_EventComm *);
unsigned int decode_uid(const char *);
int do_chdir(int, char **);
int do_chmod(int, char **);
int do_chown(int, char **);
int do_chroot(int, char **);
int do_class_start(int, char **);
int do_class_stop(int, char **);
int do_copy(int, char **);
int do_device(int, char **);
int do_domainname(int, char **);
int do_exec(int, char **);
int do_export(int, char **);
int do_hostname(int, char **);
int do_ifup(int, char **);
int do_import(int, char **);
int do_insmod(int, char **);
int do_loglevel(int, char **);
int do_mkdir(int, char **);
int do_mount(int, char **);
int do_restart(int, char **);
int do_setkey(int, char **);
int do_setprop(int, char **);
int do_setrlimit(int, char **);
int do_start(int, char **);
int do_stop(int, char **);
int do_symlink(int, char **);
int do_sysclktz(int, char **);
int do_trigger(int, char **);
int do_write(int, char **);
int get_pm_focus_fd(void);
PROCESS_MNGR_OBJ *get_process_mngr_obj(void);
void handle_control_message(const char *, const char *);
void kill_process_no_free(const char *);
int lookup_keyword(const char *);
int main_process_manager(void);
int netflix_filter_input_event(APPMGR_InputEvent *);
int netflix_process_special_key(APPMGR_InputEvent *);
int next_token(struct parse_state *);
void parse_config(const char *, char *);
int parse_config_file(const char *);
void parse_error(struct parse_state *, const char *, ...);
void parse_line_no_op(struct parse_state *, int, char **);
void parse_new_section(struct parse_state *, int, int, char **);
void *read_file(const char *, unsigned int *);
void release_process_by_name(const char *);
int release_process_by_pid(int);
struct service *service_find_by_name(const char *);
struct service *service_find_by_pid(pid_t);
void service_for_each(void (*)(struct service *));
void service_for_each_flags(unsigned int, void (*)(struct service *));
void service_start(struct service *, const char *);
void service_stop(struct service *);
static APPMNGR_RETVALUE appmngr_pm_event_notify(int, PROCESS_MNGR_ACTION *);
static APPMNGR_RETVALUE appmngr_pm_event_process(int, PROCESS_MNGR_ACTION *);
static APPMNGR_RETVALUE appmngr_pm_event_process(int, PROCESS_MNGR_ACTION *);
static int appmngr_pm_input_parse(APPMGR_InputEvent *, KeySetNode **);
static APPMNGR_RETVALUE appmngr_pm_process_exit_request(PROCESS_MNGR_ACTION *);
static APPMNGR_RETVALUE appmngr_pm_process_reg_socket(int, PROCESS_MNGR_ACTION *);
static APPMNGR_RETVALUE appmngr_pm_process_rm_name(const char *);
static APPMNGR_RETVALUE appmngr_pm_process_startup(int, PROCESS_MNGR_ACTION *);
static APPMNGR_RETVALUE appmngr_pm_switch_focus(PROCESS_MNGR_OBJ *, pid_t, int8_t);
static int appmngr_pm_terminative_process(int, PROCESS_MNGR_ACTION *);
static int create_process_dynamic_args(const char *, unsigned int, const char *);
static void msg_start(const char *);
static void msg_stop(const char *);
static void parse_line_service(struct parse_state *, int, char **);
static void service_start_if_not_disabled(struct service *);
static int valid_name(const char *);
